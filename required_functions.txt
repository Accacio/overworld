p.configureDebugVisualizer(p.COV_ENABLE_RGB_BUFFER_PREVIEW, 0, physicsClientId = self.simulator.client_id)
p.configureDebugVisualizer(p.COV_ENABLE_DEPTH_BUFFER_PREVIEW, 0, physicsClientId = self.simulator.client_id)
p.configureDebugVisualizer(p.COV_ENABLE_SEGMENTATION_MARK_PREVIEW, 0, physicsClientId = self.simulator.client_id)
p.addUserDebugLine(map2kinect, [poi_in_map.point.x, poi_in_map.point.y, poi_in_map.point.z], (1,0,0), physicsClientId = self.simulator.client_id, lifeTime=2.0)
ray_cast_results += p.rayTestBatch([map2kinect], [[poi_in_map.point.x, poi_in_map.point.y, poi_in_map.point.z]], reportHitNumber = nb_hit, physicsClientId = self.simulator.client_id)
r = p.rayTest(start_pose,end_pose)
[xmin,ymin,zmin],[xmax,ymax,zmax] = p.getAABB(end_id)
p.connect(p.GUI)
p.connect(p.DIRECT)
p.setAdditionalSearchPath(self.cad_models_additional_search_path)
flags = p.URDF_ENABLE_SLEEPING or p.URDF_ENABLE_CACHED_GRAPHICS_SHAPES or p.URDF_MERGE_FIXED_LINKS
base_link_sim_id = p.loadURDF(filename, start_pose.position().to_array(), start_pose.quaternion(), useFixedBase=use_fixed_base, physicsClientId=self.client_id)
collision_shape_id = p.createCollisionShape(p.GEOM_MESH,fileName=filename, flags=p.GEOM_FORCE_CONCAVE_TRIMESH, physicsClientId=self.client_id)   
visual_shape_id = p.createVisualShape(p.GEOM_MESH,fileName=filename,rgbaColor=color, physicsClientId=self.client_id)
visual_shape_id = p.createVisualShape(p.GEOM_MESH,fileName=filename, physicsClientId=self.client_id)
base_link_sim_id = p.createMultiBody(
            use_fixed_base,
            collision_shape_id,visual_shape_id,
            start_pose.position().to_array(),
            start_pose.quaternion(),flags = flags, physicsClientId=self.client_id)
for i in range(0, p.getNumJoints(base_link_sim_id, physicsClientId=self.client_id)):
info = p.getJointInfo(base_link_sim_id, i, physicsClientId=self.client_id)
p.changeDynamics(base_link_sim_id, info[0], frictionAnchor=1)
visual_shapes = p.getVisualShapeData(sim_id, physicsClientId=self.client_id)
link_state = p.getLinkState(sim_id, link_id, physicsClientId=self.client_id)
aabb = p.getAABB(sim_id, physicsClientId=self.client_id)
sim_ids_overlapping = p.getOverlappingObjects(aabb[0], aabb[1], physicsClientId=self.client_id)
view_matrix = p.computeViewMatrix(camera_pose.position().to_array(), target, [0, 0, 1], physicsClientId=self.client_id)
projection_matrix = p.computeProjectionMatrixFOV(camera.fov(),
                                                float(rendered_width)/rendered_height,
                                                camera.clipnear,
                                                camera.clipfar, physicsClientId=self.client_id)

camera_image = p.getCameraImage(rendered_width,
                                rendered_height,
                                viewMatrix=view_matrix,
                                renderer=p.ER_BULLET_HARDWARE_OPENGL,
                                flags=p.ER_NO_SEGMENTATION_MASK,
                                projectionMatrix=projection_matrix, physicsClientId=self.client_id)
camera_image = p.getCameraImage(rendered_width,
                                rendered_height,
                                viewMatrix=view_matrix,
                                renderer=p.ER_TINY_RENDERER,
                                flags=p.ER_NO_SEGMENTATION_MASK,
                                projectionMatrix=projection_matrix, physicsClientId=self.client_id)
constraint_id = p.createConstraint(base_link_sim_id, -1, -1, -1, p.JOINT_FIXED, [0, 0, 0], [0, 0, 0], [0, 0, 1])
p.changeDynamics(base_link_sim_id, -1, activationState=p.ACTIVATION_STATE_DISABLE_SLEEPING)
p.changeConstraint(constraint_id, jointChildPivot=t, jointChildFrameOrientation=q, maxForce=INF, physicsClientId=self.client_id)
p.removeConstraint(self.constraint_id_map[id], physicsClientId=self.client_id)
p.resetBasePositionAndOrientation(base_link_sim_id, t, q, physicsClientId=self.client_id)

p.resetJointState(base_link_sim_id,joint_id,0, physicsClientId=self.client_id)
print(p.getNumJoints(base_link_sim_id, physicsClientId=self.client_id))
